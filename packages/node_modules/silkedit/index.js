'use strict'

var fs = require('fs-extra')
var path = require('path')

// Replace oldexp (string or regexp) in a file content with newStr
function replaceFileContent(file, oldexp, newStr, cb) {
	fs.readFile(file, 'utf-8', (err, data) => {
		if (err) return cb(err)
					
		const result = data.replace(oldexp, newStr)
		fs.writeFile(file, result, 'utf-8', (err) => {
			if (err) return cb(err)
			cb()
		})
	})
}

function move_cursor(args) {
  const editView = silk.activeTextEditView()
  const repeat = 'repeat' in args ? Number.parseInt(args.repeat) : 1
  if (editView != null && 'operation' in args) {
    editView.moveCursor(args['operation'], repeat)
  }
}

module.exports = {
	activate: () => {
		const fontFamily = silk.config.get('font_family')
		const fontSize = silk.config.get('font_size')
		if (fontFamily || fontSize) {
			silk.setFont(fontFamily, fontSize)
		}
	},

	commands: {
		"new_file": () => {
			const tabView = silk.activeTabView()
			if (tabView != null) {
				tabView.addNew();
			}
		}
		,"open": () => {
			const paths = silk.showFileAndFolderDialog('Open')
			paths.forEach(function(path) {
				silk.open(path)
			})
		}
		,"open_file": () => {
			const paths = silk.showFilesDialog('Open File')
			paths.forEach(function(path) {
				silk.open(path)
			})
		}
		,"open_folder": () => {
			const path = silk.showFolderDialog('Open Folder')
			if (path != null) {
				silk.open(path)
			}
		}
		,"save": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.save()
			}
		}
		,"save_as": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.saveAs()
			}
		}
		,"save_all": () => {
			const tabViewGroup = silk.activeTabViewGroup()
			if (tabViewGroup != null) {
				tabViewGroup.saveAll()
			}
		}
		,"close_all_tabs": () => {
			const tabView = silk.activeTabView()
			if (tabView != null) {
				tabView.closeAllTabs();
			}
		}
		,"close_other_tabs": () => {
			const tabView = silk.activeTabView()
			if (tabView != null) {
				tabView.closeOtherTabs();
			}
		}
		,"close_tab": () => {
			const tabView = silk.activeTabView()
			if (tabView != null) {
				if (tabView.count() > 0) {
					tabView.closeActiveTab();
				} else {
					const win = silk.activeWindow()
					if (win != null) {
						win.close()
					}
				}
			}
		}
		,"undo": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.undo()
			}
		}
		,"redo": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.redo()
			}
		}
		,"cut": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.cut()
			}
		}
		,"copy": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.copy()
			}
		}
		,"paste": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.paste()
			}
		}
		,"select_all": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.selectAll()
			}
		}
		,"complete": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.performCompletion()
			}
		}
		,"delete": (args) => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				const repeat = 'repeat' in args ? Number.parseInt(args.repeat) : 1
				editView.delete(repeat)
			}
		}
		,"delete_backward": (args) => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				const repeat = 'repeat' in args ? Number.parseInt(args.repeat) : 1
				editView.delete(-1 * repeat)
			}
		}
		,"move_cursor_up": (args) => {
			args["operation"] = "up"
			move_cursor(args)
		}
		,"move_cursor_down": (args) => {
			args["operation"] = "down"
			move_cursor(args)
		}
		,"move_cursor_left": (args) => {
			args["operation"] = "left"
			move_cursor(args)
		}
		,"move_cursor_right": (args) => {
			args["operation"] = "right"
			move_cursor(args)
		}
		,"move_cursor_start_of_line": (args) => {
			args["operation"] = "start_of_line"
			move_cursor(args)
		}
		,"move_cursor_first_non_blank_char": (args) => {
			args["operation"] = "first_non_blank_char"
			move_cursor(args)
		}
		,"move_cursor_last_char": (args) => {
			args["operation"] = "last_char"
			move_cursor(args)
		}
		,"move_cursor_next_line": (args) => {
			args["operation"] = "next_line"
			move_cursor(args)
		}
		,"move_cursor_prev_line": (args) => {
			args["operation"] = "prev_line"
			move_cursor(args)
		}
		,"find_and_replace": () => {
			const win = silk.activeWindow()
			if (win != null) {
				win.openFindAndReplacePanel()
			}
		}
		,"split_horizontally": () => {
			const tabViewGroup = silk.activeTabViewGroup()
			if (tabViewGroup != null) {
				tabViewGroup.splitHorizontally();
			}
		}
		,"split_vertically": () => {
			const tabViewGroup = silk.activeTabViewGroup()
			if (tabViewGroup != null) {
				tabViewGroup.splitVertically();
			}
		}
		,"show_scope": () => {
			const win = silk.activeWindow()
			const editView = silk.activeTextEditView()
			if (win != null && editView != null) {
				win.statusBar().showMessage(editView.scopeName())
			}
		}
		,"show_scope_tree": () => {
			const win = silk.activeWindow()
			const editView = silk.activeTextEditView()
			if (win != null && editView != null) {
				silk.alert(editView.scopeTree())
			}
		}
		,"new_package": () => {
			const validate = (pkgName, callback) => {
			      fs.open(path.normalize(silk.packageDir() + '/' + pkgName), 'r', (err, fd) => {
                                         fd && fs.close(fd, (err) => { callback(false) })
                                         err && callback(true)
                                       })
			}
			const pkgName = silk.showInputDialog("Enter new package path", "my_package", validate)
			// copy hello example package to a new package directory
			if (pkgName == null) return
				
		    const pkgPath = path.normalize(silk.packageDir() + '/' + pkgName)
			fs.copy(__dirname + "/resources/hello", pkgPath, (err) => {
				if (err) return console.error(err)

				// replace <name> with the new package name
				// open the package dir as project
				replaceFileContent(pkgPath + "/package.json", /<name>/g, path.basename(pkgPath), (err) => {
					if (err) return console.error(err)
					replaceFileContent(pkgPath + "/menus.yml", /<name>/g, path.basename(pkgPath), (err) => {
						if (err) return console.error(err)
						replaceFileContent(pkgPath + "/index.js", /<name>/g, path.basename(pkgPath), (err) => {
							silk.open(pkgPath)
							silk.open(pkgPath + '/package.json')
						})
					})
				})
			})
		}
		,"newline": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.insertNewLine()
			}
		}
		,"indent": () => {
			const editView = silk.activeTextEditView()
			if (editView != null) {
				editView.indent()
			}
		}
		,"select_next_tab": () => {
			const tabView = silk.activeTabView()
			if (tabView != null) {
				const currentIndex = tabView.currentIndex()
				if (currentIndex + 1 >= tabView.count()) {
					tabView.setCurrentIndex(0)
				} else {
					tabView.setCurrentIndex(currentIndex + 1)
				}
			}
		}
		,"select_previous_tab": () => {
			const tabView = silk.activeTabView()
			if (tabView != null) {
				const currentIndex = tabView.currentIndex()
				if (currentIndex - 1 < 0) {
					tabView.setCurrentIndex(tabView.count() - 1)
				} else {
					tabView.setCurrentIndex(currentIndex - 1)
				}
			}
		}
	}
}
