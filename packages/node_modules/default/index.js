'use strict';

const fs = require('fs-extra');
const path = require('path');
const silkedit = require('silkedit');

// Replace oldexp (string or regexp) in a file content with newStr
function replaceFileContent(file, oldexp, newStr, cb) {
	fs.readFile(file, 'utf-8', (err, data) => {
		if (err) return cb(err)
					
		const result = data.replace(oldexp, newStr)
		fs.writeFile(file, result, 'utf-8', (err) => {
			if (err) return cb(err)
			cb()
		})
	})
}

function move_cursor(args) {
  const editView = silkedit.API.activeTextEditView()
  const repeat = 'repeat' in args ? Number.parseInt(args.repeat) : 1
  if (editView != null && 'operation' in args) {
    editView.moveCursor(args['operation'], repeat)
  }
}

module.exports = {
	activate: () => {
		const fontFamily = silkedit.Config.get('font_family')
		const fontSize = silkedit.Config.get('font_size')
		if (fontFamily || fontSize) {
			silkedit.setFont(fontFamily, fontSize)
		}
	},

	commands: {
		"new_file": () => {
			const tabView = silkedit.API.activeTabView()
			if (tabView != null) {
				tabView.addNew();
			} else {
			  console.log('active tab view is null');
			}
		}
		,"open": () => {
			const paths = silkedit.API.showFileAndFolderDialog('Open')
			paths.forEach(function(path) {
				silkedit.API.open(path)
			})
		}
		,"open_file": () => {
			const paths = silkedit.API.showFilesDialog('Open File')
			paths.forEach(function(path) {
				silkedit.API.open(path)
			})
		}
		,"open_folder": () => {
			const path = silkedit.API.showFolderDialog('Open Folder')
			if (path != null) {
				silkedit.API.open(path)
			}
		}
		,"save": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.save()
			}
		}
		,"save_as": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.saveAs()
			}
		}
		,"save_all": () => {
			const tabViewGroup = silkedit.API.activeTabViewGroup()
			if (tabViewGroup != null) {
				tabViewGroup.saveAll()
			}
		}
		,"close_all_tabs": () => {
			const tabView = silkedit.API.activeTabView()
			if (tabView != null) {
				tabView.closeAllTabs();
			}
		}
		,"close_other_tabs": () => {
			const tabView = silkedit.API.activeTabView()
			if (tabView != null) {
				tabView.closeOtherTabs();
			}
		}
		,"close_tab": () => {
			const tabView = silkedit.API.activeTabView()
			if (tabView != null) {
				if (tabView.count > 0) {
					tabView.closeActiveTab();
				} else {
					const win = silkedit.API.activeWindow()
					if (win != null) {
						win.close()
					}
				}
			}
		}
		,"undo": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.undo()
			}
		}
		,"redo": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.redo()
			}
		}
		,"cut": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.cut()
			}
		}
		,"copy": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.copy()
			}
		}
		,"paste": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.paste()
			}
		}
		,"select_all": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.selectAll()
			}
		}
		,"complete": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.performCompletion()
			}
		}
		,"delete": (args) => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				const repeat = 'repeat' in args ? Number.parseInt(args.repeat) : 1
				editView.delete(repeat)
			}
		}
		,"delete_backward": (args) => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				const repeat = 'repeat' in args ? Number.parseInt(args.repeat) : 1
				editView.delete(-1 * repeat)
			}
		}
		,"move_cursor_up": (args) => {
			args["operation"] = "up"
			move_cursor(args)
		}
		,"move_cursor_down": (args) => {
			args["operation"] = "down"
			move_cursor(args)
		}
		,"move_cursor_left": (args) => {
			args["operation"] = "left"
			move_cursor(args)
		}
		,"move_cursor_right": (args) => {
			args["operation"] = "right"
			move_cursor(args)
		}
		,"move_cursor_start_of_line": (args) => {
			args["operation"] = "start_of_line"
			move_cursor(args)
		}
		,"move_cursor_first_non_blank_char": (args) => {
			args["operation"] = "first_non_blank_char"
			move_cursor(args)
		}
		,"move_cursor_last_char": (args) => {
			args["operation"] = "last_char"
			move_cursor(args)
		}
		,"move_cursor_next_line": (args) => {
			args["operation"] = "next_line"
			move_cursor(args)
		}
		,"move_cursor_prev_line": (args) => {
			args["operation"] = "prev_line"
			move_cursor(args)
		}
		,"find_and_replace": () => {
			const win = silkedit.API.activeWindow()
			if (win != null) {
				win.openFindAndReplacePanel()
			}
		}
		,"split_horizontally": () => {
			const tabViewGroup = silkedit.API.activeTabViewGroup()
			if (tabViewGroup != null) {
				tabViewGroup.splitHorizontally();
			}
		}
		,"split_vertically": () => {
			const tabViewGroup = silkedit.API.activeTabViewGroup()
			if (tabViewGroup != null) {
				tabViewGroup.splitVertically();
			}
		}
		,"show_scope": () => {
			const win = silkedit.API.activeWindow()
			const editView = silkedit.API.activeTextEditView()
			if (win != null && editView != null) {
				win.statusBar().showMessage(editView.scopeName())
			}
		}
		,"show_scope_tree": () => {
			const win = silkedit.API.activeWindow()
			const editView = silkedit.API.activeTextEditView()
			if (win != null && editView != null) {
				silkedit.API.alert(editView.scopeTree())
			}
		}
		,"new_package": () => {
      var validate;
      console.log(silkedit.Constants.userPackagesJsonPath);
      fs.readFile(silkedit.Constants.userPackagesJsonPath, 'utf-8', (err, data) => {
        var packages
        if (err) {
          validate = null
        } else {
          try {
            packages = JSON.parse(data)
            let pkgnameSet = new Set(packages.map((pkg) => pkg.name))
            validate = (pkgName, callback) => {
              callback(!pkgnameSet.has(pkgName))
            }
          } catch(err) {
            console.error(err)
            validate = null
          }
        }

        const dialog = new silkedit.InputDialog("Enter new package path", "my_package", validate);
        const pkgName = dialog.show();
  			// copy hello example package to a new package directory
  			if (pkgName == null || pkgName.length == 0) return
				
  		  const pkgPath = path.join(silkedit.Constants.userPackagesNodeModulesPath, pkgName)
  		  console.log(pkgPath);
   			fs.copy(__dirname + "/resources/hello", pkgPath, (err) => {
   				if (err) throw err

   			  // replace <name> with the new package name
   			  // open the package dir as project
   			  const newPkgJsonPath = pkgPath + "/package.json"
   			  replaceFileContent(newPkgJsonPath, /<name>/g, path.basename(pkgPath), (err) => {
   				  if (err) throw err
   				  replaceFileContent(pkgPath + "/menu.yml", /<name>/g, path.basename(pkgPath), (err) => {
   					  if (err) throw err
   					  replaceFileContent(pkgPath + "/index.js", /<name>/g, path.basename(pkgPath), (err) => {
     					  if (err) throw err
     					  replaceFileContent(pkgPath + "/README.md", /<name>/g, path.basename(pkgPath), (err) => {
      					  if (err) throw err
     					    // append new package's package.json content to packages.json
     					    fs.readFile(newPkgJsonPath, (err, data) => {
    					      if (err) throw err

      					    packages.push(JSON.parse(data))
      					    fs.writeFile(silkedit.Constants.userPackagesJsonPath, JSON.stringify(packages), (err) => {
      					      if (err) throw err

        						  silkedit.API.open(pkgPath);
        						  // fixme: package.json is opened in another window (not new window opened above)
        						  // silkedit.API.open(path.join(pkgPath, 'package.json'));
      					    });
      					  });
   					    });
   					  });
   					});
   				});
   			});
      });
		}
		,"newline": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.insertNewLine()
			}
		}
		,"indent": () => {
			const editView = silkedit.API.activeTextEditView()
			if (editView != null) {
				editView.indent()
			}
		}
		,"select_next_tab": () => {
			const tabView = silkedit.API.activeTabView();
			if (tabView != null) {
				const currentIndex = tabView.currentIndex;
				if (currentIndex + 1 >= tabView.count) {
					tabView.currentIndex = 0;
				} else {
					tabView.currentIndex = currentIndex + 1;
				}
			}
		}
		,"select_previous_tab": () => {
			const tabView = silkedit.API.activeTabView();
			if (tabView != null) {
				const currentIndex = tabView.currentIndex;
				if (currentIndex - 1 < 0) {
					tabView.currentIndex = tabView.count - 1;
				} else {
					tabView.currentIndex = currentIndex - 1;
				}
			}
		}
	}
}
