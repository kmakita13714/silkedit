#!/bin/bash

if [ "$(uname)" == 'Darwin' ]; then
  OS='Mac'
elif [ "$(expr substr $(uname -s) 1 5)" == 'Linux' ]; then
  OS='Linux'
elif [ "$(expr substr $(uname -s) 1 4)" == 'MSYS' ]; then
  if [ "$(uname -m)" == "x86_64" ]; then
    OS='Win64'
  else
    OS='Win32'
  fi
elif [ "$(expr substr $(uname -s) 1 5)" == 'MINGW' ]; then
  echo "You're running this program on MINGW. Please run it from msys2_shell.bat"
  exit 1
else
  echo "Your platform ($(uname -a)) is not supported."
  exit 1
fi

format() {
    find src -name \*.cpp -or -name \*.h | xargs clang-format -i
    find test/src -name \*.cpp -or -name \*.h | xargs clang-format -i
    if [ "$1" = '-commit' -o "$1" = '-push' ]; then
        git commit -am "clang-format"
    fi

    if [ "$1" = '-push' ]; then
        if git status | grep -sq "Your branch is ahead of"; then
            git push origin HEAD:master
        fi
        exit 0
    fi
}

# Create a new directory with the specified name if it doesn't exist.
# Recreate it if it already exists.
ensure_dir() {
    if [ -d $1 ]; then
        echo "Recreating $1 directory..."
        rm -rf $1
    else
        echo "Creating $1 directory..."
    fi

    mkdir -p $1
}

clean() {
    # Somehow git clean fails to remove these directories, so remove them manually
    rm -rf build plugin_runner/bin

    # remove everything not tracked in git
    git clean -xdf
}

# resolve dependency
resolve() {
    # msgpack-c and libguess submodules
    git submodule init
    git submodule update

    # Source Han Code JP font
    if [ ! -f resources/fonts/SourceHanCodeJP-Normal.otf ]; then
        wget silksmiths.sakura.ne.jp/files/SourceHanCodeJP-Normal.otf silksmiths.sakura.ne.jp/files/SourceHanCodeJP-Bold.otf
        mkdir -p resources/fonts
        mv *.otf resources/fonts
    fi

    if [ $OS == 'Mac' ]; then
      brew list yaml-cpp || brew install yaml-cpp --c++11 --with-static-lib
      brew list oniguruma || brew install oniguruma
      brew list cmake || brew install cmake
      brew list ninja || brew install ninja
      brew list gnu-sed || brew install gnu-sed --with-default-names

      # node
      if [ ! -d plugin_runner/bin ]; then
        node=node-v0.12.0-darwin-x64
        echo "Downloading $node"
        curl -O http://nodejs.org/dist/v0.12.0/$node.tar.gz
        tar zxf $node.tar.gz
        # -R keeps symlink intact
        cp -R $node/bin $node/lib plugin_runner
        rm -rf $node $node.tar.gz
      fi

      # npm install for plugin runner
      cd plugin_runner
      PATH=$(pwd)/bin:$PATH
      bin/npm install
      cd ..

      # npm install for silkedit package
      cd packages/silkedit
      ../../plugin_runner/bin/npm install
      cd ../..

      # libguess
      if [ ! -f /usr/local/lib/libguess.dylib ]; then
        brew list automake || brew install automake
        cd libguess
        autoheader
        aclocal
        autoconf
        ./configure
        make
        make install
        cd ..
      fi

    elif [ $OS == 'Linux' ]; then
      OS = 'Linux'
    else
        # yaml-cpp (If you install it from pacman, it doesn't work somehow)
        if [ ! -f lib/libyaml-cpp.a ]; then
            wget https://yaml-cpp.googlecode.com/files/yaml-cpp-0.5.1.tar.gz --no-check-certificate
            tar zxf yaml-cpp-0.5.1.tar.gz
            cd yaml-cpp-0.5.1

            # apply a patch to fix an issue of CMakeLists.txt
            wget http://silksmiths.sakura.ne.jp/files/yaml-cpp/CMakeLists.txt.patch
            patch < CMakeLists.txt.patch

            # apply a patch to fix a compile error https://code.google.com/p/yaml-cpp/issues/detail?id=276&colspec=ID%20Type%20Status%20Priority%20Milestone%20Component%20Owner%20Summary
            cd src
            wget http://silksmiths.sakura.ne.jp/files/yaml-cpp/ostream_wrapper.patch
            patch < ostream_wrapper.patch
            cd ..

            ensure_dir build
            cd build
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../.. ..
            ninja
            ninja install
            cd ../..
            rm -rf yaml-cpp-0.5.1*
        fi

        # node
        if [ ! -d plugin_runner/bin ]; then
            cp -r "C:\Program Files\nodejs" plugin_runner
            cd plugin_runner
            mv nodejs bin
            cd ..
        fi

        # npm install for plugin runner
        cd plugin_runner
        node bin/node_modules/npm/bin/npm-cli.js install
        cd ..

        # npm install for silkedit package
        cd packages/silkedit
        node ../../plugin_runner/bin/node_modules/npm/bin/npm-cli.js install
        cd ../..
    fi
}

# release build
build() {
    resolve

    if [ ! -d build ]; then
        echo "build directory doesn't exist. Creating it..."
        ensure_dir build
    fi

    cd build

    if [ "$1" = '-edge' ]; then
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_EDGE=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Release
    else
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Release
    fi

    ninja

    if [ $OS == 'Mac' ]; then
        echo "Creating dmg..."
        macdeployqt SilkEdit.app
        ensure_dir dmg
        cp -r SilkEdit.app dmg
        ln -s /Applications dmg/Applications
				n=0
				MAX=3
				until [ $n -ge $MAX ]
				do
          rm -rf /Volumes/SilkEdit*
          touch dmg/.Trash
          hdiutil create -volname SilkEdit -srcfolder dmg -ov -format UDZO SilkEdit.dmg && break
          echo "Failed to create DMG. retrying"
					n=$[$n+1]
					sleep 3
				done
				if [ $n == $MAX ]; then
          echo "Failed to create DMG $MAX times"
					exit 1
				fi
    elif [ $OS == 'Linux' ]; then
      OS = 'Linux'
    else
        if [ ! -d Release ]; then
            mkdir Release
        fi
        cp -r silkedit.exe packages plugin_runner Release
        rm -rf silkedit.exe packages plugin_runner
        cd Release
        windeployqt --release-with-debug-info silkedit.exe
        if [ $OS == 'Win32' ]; then
            # Change Arch to x86 and remove ArchitecturesAllowed=x64 for x86 installer
            cat ../../silkedit.iss | sed -e 's/#define Arch "x64"/#define Arch "x86"/' | grep -v ArchitecturesAllowed=x64 > ../../silkedit_x86.iss
            iscc ../../silkedit_x86.iss
            rm ../../silkedit_x86.iss
        else
            iscc ../../silkedit.iss
        fi
    fi
}

rebuild() {
    ensure_dir build
    build $1
}

# static analysis
analyze() {
    if [ $OS == 'Win32' ]; then
        echo "gcc is used on Windows so clang-check doesn't work"
        exit 1
    fi

	tmpFile=/tmp/clang-check-err
	find src -name '*.cpp' |xargs clang-check -analyze -p build 2>&1 | tee $tmpFile
	if [ $(cat $tmpFile | grep warning | wc -l) != 0 ]; then
	  rm -rf $tmpFile
		exit 1
	fi
	rm -rf $tmpFile
}

run_tests() {
    resolve

    cd test
    ensure_dir build
    cd build

    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Debug
    if [ -f build.ninja ]; then
        ninja
        ctest --output-on-failure --no-compress-output -T Test || /usr/bin/true
    fi
}

set_version() {
    if [ $# -ne 1 ]; then
        echo 'Specify a version number (e.g., 1.0.0)'
    else
        sed -i -E "s/CFBundleShortVersionString = \"[0-9]+\.[0-9]+\.[0-9]+\";/CFBundleShortVersionString = \"$1\";/" src/SilkEdit-info.plist
        commaVersion=$(echo $1 | sed -E 's/\./,/g')
        sed -i -E "s/VER_VERSION             [0-9]+,[0-9]+,[0-9]+/VER_VERSION             $commaVersion/" resources/silkedit.rc
        sed -i -E "s/VER_VERSION_STR         \"[0-9]+\.[0-9]+\.[0-9]+\\\\0\"/VER_VERSION_STR         \"$1\\\\0\"/" resources/silkedit.rc
        sed -i -E "s/VERSION \"[0-9]+\.[0-9]+\.[0-9]+\"/VERSION \"$1\"/" src/version.h
        git add src/SilkEdit-info.plist resources/silkedit.rc src/version.h
        git commit -m "Bump version to $1"
        git tag v$1
    fi
}

set_build() {
    if [ $# -ne 1 ]; then
        echo 'Specify a build number'
    else
        sed -i -E "s/CFBundleVersion = \"[0-9]+\";/CFBundleVersion = \"$1\";/" src/SilkEdit-info.plist
        sed -i -E "s/BUILD \"[0-9]+\"/BUILD \"$1\"/" src/version.h
    fi
}

# -e: stops if any command returns non zero value
set -e

case "$1" in
    analyze)
        analyze
        echo
        ;;
    build)
        build $2
        echo
        ;;
    clean)
        clean
        echo
        ;;
    format)
        # grep return 1 if it doesn't match anything, so disable -e here
        set +e
        format $2
        echo
        ;;
    rebuild)
        rebuild $2
        echo
        ;;
    resolve)
        resolve
        echo
        ;;
    test)
        run_tests
        echo
        ;;
    set_version)
        set_version $2
        echo
        ;;
    set_build)
        set_build $2
        echo
        ;;
    *)

        cat << EOF
analyze      static analysis
build        build an app and an installer
clean        clean build dir
format       format sources
rebuild      build from scratch
resolve      resolve dependency
test         run tests
set_version  set version number
set_build    set build number
EOF

        exit 1
esac

exit 0
