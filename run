#!/bin/bash

if [ "$(uname)" == 'Darwin' ]; then
  OS='Mac'
elif [ "$(expr substr $(uname -s) 1 5)" == 'Linux' ]; then
  OS='Linux'
elif [ "$(expr substr $(uname -s) 1 7)" == 'MSYS_NT' ]; then
  OS='Win32'
elif [ "$(expr substr $(uname -s) 1 5)" == 'MINGW' ]; then
  echo "You're running this program on MINGW. Please run it from msys2_shell.bat"
  exit 1
else
  echo "Your platform ($(uname -a)) is not supported."
  exit 1
fi

format() {
    find src -name \*.cpp -or -name \*.h | xargs clang-format -i
    find test/src -name \*.cpp -or -name \*.h | xargs clang-format -i
    if [ "$1" = '-commit' -o "$1" = '-push' ]; then
        git commit -am "clang-format"
    fi

    if [ "$1" = '-push' ]; then
        if git status | grep -sq "Your branch is ahead of"; then
            git push origin HEAD:master
        fi
        exit 0
    fi
}

# Create a new directory with the specified name if it doesn't exist.
# Recreate it if it already exists.
ensure_dir() {
    if [ -d $1 ]; then
        echo "Recreating $1 directory..."
        rm -rf $1
    else
        echo "Creating $1 directory..."
    fi

    mkdir -p $1
}

clean() {
    rm -rf build
}

# resolve dependency
resolve() {
    if [ $OS == 'Mac' ]; then
      # yaml-cpp
      brew list yaml-cpp || brew install yaml-cpp --c++11 --with-static-lib
      brew list oniguruma || brew install oniguruma
      brew list cmake || brew install cmake
      brew list ninja || brew install ninja

      # node
      if [ ! -d plugin_runner/bin ]; then
        node=node-v0.12.0-darwin-x64
        echo "Downloading $node"
        curl -O http://nodejs.org/dist/v0.12.0/$node.tar.gz
        tar zxf $node.tar.gz
        # -R keeps symlink intact
        cp -R $node/bin $node/lib plugin_runner
        rm -rf $node $node.tar.gz

        cd plugin_runner
        bin/npm install
        cd ..
      fi
    elif [ $OS == 'Linux' ]; then
      OS = 'Linux'
    else
        # yaml-cpp (If you install it from pacman, it doesn't work somehow)
        wget https://yaml-cpp.googlecode.com/files/yaml-cpp-0.5.1.tar.gz --no-check-certificate
        tar zxf yaml-cpp-0.5.1.tar.gz
        cd yaml-cpp-0.5.1

        # apply a patch to fix an issue of CMakeLists.txt
        wget http://home.shinichy.com/files/yaml-cpp/CMakeLists.txt.patch
        patch < CMakeLists.txt.patch

        # apply a patch to fix a compile error https://code.google.com/p/yaml-cpp/issues/detail?id=276&colspec=ID%20Type%20Status%20Priority%20Milestone%20Component%20Owner%20Summary
        cd src
        wget http://home.shinichy.com/files/yaml-cpp/ostream_wrapper.patch
        patch < ostream_wrapper.patch
        cd ..

        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../.. ..
        ninja
        ninja install
        cd ../..
        rm -rf yaml-cpp-0.5.1 yaml-cpp-0.5.1.tar.gz

        # node
        if [ ! -d plugin_runner/bin ]; then
            cp -r "C:\Program Files\nodejs" plugin_runner
            cd plugin_runner
            mv nodejs bin
            node bin/node_modules/npm/bin/npm-cli.js install
            cd ..
        fi
    fi


    # msgpack-c
    git submodule init
    git submodule update
}

# release build
build() {
    # resolve

    if [ ! -d build ]; then
        echo "build directory doesn't exist. Creating it..."
        ensure_dir build
    fi

    cd build

    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Release

    ninja

    if [ $OS == 'Mac' ]; then
        echo "Creating dmg..."
        macdeployqt SilkEdit.app
        ensure_dir dmg
        cp -r SilkEdit.app dmg
        ln -s /Applications dmg/Applications
        hdiutil create -volname SilkEdit -srcfolder dmg -ov -format UDZO SilkEdit.dmg
    elif [ $OS == 'Win32' ]; then
        if [ ! -d Release ]; then
            mkdir Release
        fi
        cp -r silkedit.exe packages plugin_runner Release
        cd Release
        windeployqt --release-with-debug-info silkedit.exe
        iscc ../../silkedit.iss
    fi
}

rebuild() {
    ensure_dir build
    build
}

# static analysis
analyze() {
    if [ $OS == 'Win32' ]; then
        echo "gcc is used on Windows so clang-check doesn't work"
        exit
    fi

	tmpFile=/tmp/clang-check-err
	find src -name '*.cpp' |xargs clang-check -analyze -p build 2>&1 | tee $tmpFile
	if [ $(cat $tmpFile | grep warning | wc -l) != 0 ]; then
	  rm -rf $tmpFile
		exit 1
	fi
	rm -rf $tmpFile
}

run_tests() {
    cd test
    ensure_dir build
    cd build

    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Debug
    if [ -f build.ninja ]; then
        ninja
        ctest --output-on-failure --no-compress-output -T Test || /usr/bin/true
    fi
}

# -e: stops if any command returns 0
set -e

case "$1" in
    analyze)
        analyze
        echo
        ;;
    build)
        build
        echo
        ;;
    clean)
        clean
        echo
        ;;
    format)
        # grep return 1 if it doesn't match anything, so disable -e here
        set +e
        format $2
        echo
        ;;
    rebuild)
        rebuild
        echo
        ;;
    resolve)
        resolve
        echo
        ;;
    test)
        run_tests
        echo
        ;;
    *)

        cat << EOF
analyze     static analysis
build       build an app and an installer
clean       clean build dir
format      format sources
rebuild     build from scratch
resolve     resolve dependency
test        run tests
EOF

        exit 1
esac

exit 0
