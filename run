#!/bin/bash

alias qmake=~/Qt/5.3/clang_64/bin/qmake
alias macdeployqt=~/Qt/5.3/clang_64/bin/macdeployqt

LIGHT_GREEN='\x1B[0;32m'
NC='\x1B[0m' # No Color

# run clang-format and clang-check
pre_commit() {
	  # clang-format
		find . -name \*.cpp -or -name \*.h | xargs clang-format -i

		# clang-check
		cmake ../silkedit-build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja -DCMAKE_BUILD_TYPE=Debug
		result=$(find src -name '*.cpp'|xargs clang-check -p ../silkedit-build 2>&1)
		if [ $(echo ${result} | grep warning -c) -ne 0 ]
		then
			echo "${result}"
			exit 1
		fi

		echo -e "${LIGHT_GREEN}Good to commit!${NC}"
}

clean() {
	  rm -rf build
}

# release build
build() {
		# Check for build directory
		if [ -d "build" ]; then
				echo "Recreating build directory..."
				rm -rf build
		else
				echo "Creating build directory..."
		fi

		mkdir build
		cd build

		cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Release

	  if [ -f build.ninja ]; then
			ninja
	  fi

		macdeployqt src/SilkEdit.app
		mkdir dmg
		cp -r src/SilkEdit.app dmg
		ln -s /Applications dmg/Applications
		hdiutil create -volname SilkEdit -srcfolder dmg -ov -format UDZO SilkEdit.dmg
}

# static analysis
analyze() {
		# Check for build directory
		if [ -d "build" ]; then
				echo "Recreating build directory..."
				rm -rf build
		else
				echo "Creating build directory..."
		fi

		mkdir build
		cd build

		scan-build cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug
		scan-build -o ./build-analysis ninja
}

#set -e

case "$1" in
  build)
		build
    echo
    ;;

  clean)
    clean
    echo
    ;;

	pre-commit)
		pre_commit
		echo
		;;

  analyze)
		analyze
    echo
    ;;

  *)
    echo $"Usage: $0 {analyze|build|clean|pre-commit}"
    exit 1
esac

exit 0
