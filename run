#!/bin/bash

alias qmake=~/Qt/5.3/clang_64/bin/qmake
alias macdeployqt=~/Qt/5.3/clang_64/bin/macdeployqt

LIGHT_GREEN='\x1B[0;32m'
NC='\x1B[0m' # No Color

format() {
    find src -name \*.cpp -or -name \*.h | xargs clang-format -i
    if [ "$1" = '-commit' ]; then
        git commit -am "clang-format"
    fi
}

# run clang-format and clang-check
pre_commit() {
	      format

        # clang-check
        ensure_dir build
        cd build

        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Debug
        result=$(find ../src -name '*.cpp'|xargs clang-check -p . 2>&1)
        if [ $(echo ${result} | grep warning -c) -ne 0 ]
            then
            echo "${result}"
            exit 1
        fi

        echo -e "${LIGHT_GREEN}Good to commit!${NC}"
    }

# Create a new directory with the specified name if it doesn't exist.
# Recreate it if it already exists.
ensure_dir() {
    if [ -d $1 ]; then
        echo "Recreating $1 directory..."
        rm -rf $1
    else
        echo "Creating $1 directory..."
    fi

    mkdir -p $1
}

clean() {
    rm -rf build lib include
}

# resolve dependency
resolve() {
    ant -Duser=readonly -Dpassword=readonly

    for f in lib/include-*.zip
    do
        echo "Unzipping $f"
        # -o: overwrite  existing  files  without  prompting
        unzip -o $f
        rm $f
    done

    # build stextedit
    git submodule init && git submodule update
    (cd stextedit && ./run build)
}

# release build
build() {
    resolve

    if [ ! -d build ]; then
        echo "build directory doesn't exist. Creating it..."
        ensure_dir build
    fi

    cd build

    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Release

    if [ -f build.ninja ]; then
        ninja
    fi

    echo "Creating dmg..."
    macdeployqt SilkEdit.app
    ensure_dir dmg
    cp -r SilkEdit.app dmg
    ln -s /Applications dmg/Applications
    hdiutil create -volname SilkEdit -srcfolder dmg -ov -format UDZO SilkEdit.dmg

}

rebuild() {
    ensure_dir build
    build
}

# static analysis
analyze() {
    ensure_dir build
    cd build

    cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=/usr/local/checker-276/libexec/c++-analyzer
    scan-build -v -o ./build-analysis --use-analyzer=/usr/bin/clang++ --status-bugs ninja

}

run_tests() {
    cd test
    ensure_dir build
    cd build

    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Debug
    if [ -f build.ninja ]; then
        ninja
		ctest --output-on-failure --no-compress-output -T Test || /usr/bin/true
    fi
}

set -e

case "$1" in
    analyze)
        analyze
        echo
        ;;
    build)
        build
        echo
        ;;
    clean)
        clean
        echo
        ;;
    format)
        format $2
        echo
        ;;
    pre-commit)
        pre_commit
        echo
        ;;
    rebuild)
        rebuild
        echo
        ;;
    resolve)
        resolve
        echo
        ;;
    test)
        run_tests
        echo
        ;;
    *)

        cat << EOF
analyze     static analysis
build       build an app and an installer
clean       clean build dir
format      format sources
pre-commit  run clang-format and clang-check
rebuild     build from scratch
resolve     resolve dependency
test        run tests
EOF

        exit 1
esac

exit 0
