'use strict'

const fs = require('fs')
const yaml = require('js-yaml')
const https = require('https')
const path = require('path')
const bridge = process.binding('silkeditbridge');
const QtEventEmitter = require('./lib/qt_event_emitter')(bridge);
const domain = require('domain');
const util = require('util');

const locale = process.argv[2];

// wrap Node.js console object methods
console.log = function() {
  bridge.info(util.format.apply(this, arguments));
}
console.info = console.log;
console.warn = function() {
  bridge.warn(util.format.apply(this, arguments));
}
console.error = function() {
  bridge.error(util.format.apply(this, arguments));
}
  
bridge.JSHandler.inheritsQtEventEmitter = (proto) => {
  switch(typeof proto) {
    case 'function':
      util.inherits(proto, QtEventEmitter);
      break;
    case 'object':
      Object.setPrototypeOf(proto, QtEventEmitter.prototype);
      break;
    default:
      console.error('invalid proto');
  }
}

// init after JSHandler is initialized to call inheritsQtEventEmitter
bridge.lateInit(bridge);

// rename QFlags name to enum name (it's impossible to do this in Qt)
const customDialogButtonBox = bridge.DialogButtonBox;
customDialogButtonBox.StandardButton = customDialogButtonBox.StandardButtons;
delete customDialogButtonBox.StandardButtons;

// require CommandManager after initializing bridge
const CommandManager = require('./lib/command_manager')(bridge);
const PackageManager = require('./lib/package_manager')(CommandManager, tr);

//Note: tr uses PackageManager
function tr(key, packageName, defaultValue) {
  defaultValue = defaultValue ? defaultValue : '';
  if (PackageManager.isLoaded(packageName)) {
    try {
      return bridge.translate(PackageManager.getPackage(packageName).dir, key, defaultValue);
    } catch(e) {
      console.warn(e);
    }
  } else {
    console.warn(`${packageName} not found`);
  }
  
  return defaultValue;
}

/**
 * @module silkedit
 */
const silkedit = {
    // module global functions
    /**
     * アラートを表示する。
     * @param {string} msg - メッセージ
     */
    alert: function(msg) {
      const msgBox = new this.MessageBox;
      msgBox.text = msg;
      msgBox.exec();
    },
    /**
     * ローカライズされた文字列を取得する。
     * @param {string} key - ローカライズされた文字列を探すキー "パッケージ名:キー"のように指定する。
     * @param {string} [packageName=null] - パッケージ名。省略するとSilkEdit内部のパッケージを指定。
     * @param {string} [defaultValue=''] - キーがない場合のデフォルト文字列
     * @returns {string}
     * @example
     * silkedit."hello", "hello", "Hello!")
     */
    tr: (key, packageName, defaultValue) => tr(key, packageName, defaultValue),
    
    // singletons
    App: bridge.App,
    CommandManager: CommandManager,
    ConditionManager: bridge.ConditionManager,
    Config: bridge.Config,
    DocumentManager: bridge.DocumentManager,
    KeymapManager: require('./lib/keymap_manager'),
    ProjectManager: bridge.ProjectManager,
    PackageManager: PackageManager,

    // classes
    Completer: bridge.Completer,
    Console: bridge.Console,
    Dialog: bridge.Dialog,
    DialogButtonBox: customDialogButtonBox,
    FileDialog: bridge.FileDialog,
    FindReplaceView: bridge.FindReplaceView,
    Font: bridge.Font,
    ItemSelectionModel: bridge.ItemSelectionModel,
    KeyEvent: bridge.KeyEvent,
    Label: bridge.Label,
    LineEdit: bridge.LineEdit,
    MessageBox: bridge.MessageBox,
    Rect: bridge.Rect,
    StringListModel: bridge.StringListModel,
    TextBlock: bridge.TextBlock,
    TextCursor: bridge.TextCursor,
    TextOption: bridge.TextOption,
    TextEdit: bridge.TextEdit,
    Url: bridge.Url,
    VBoxLayout: bridge.VBoxLayout,
    WebView: bridge.WebView,
    Window: bridge.Window,
    Validator: bridge.Validator,

    // enums
    /**
     * {@link http://doc.qt.io/qt-5/qt.html#CaseSensitivity-enum}
     * @readonly
     * @enum {number}
     * @example
     * silkedit.CaseSensitivity.CaseInsensitive
     */
    CaseSensitivity: bridge.CaseSensitivity,
    Event: bridge.Event,  // expose Event.Type
    /**
     * {@link http://doc.qt.io/qt-5/qt.html#EventPriority-enum}
     * @readonly
     * @enum {number}
     * @example
     * silkedit.EventPriority.NormalEventPriority
     */
    EventPriority: bridge.QtEnums.EventPriority,
    /**
     * {@link http://doc.qt.io/qt-5/qt.html#Key-enum}
     * @readonly
     * @enum {number}
     * @example
     * silkedit.Key.Key_0
     */
    Key: bridge.Key,
    /**
     * {@link http://doc.qt.io/qt-5/qt.html#KeyboardModifier-enum}
     * @readonly
     * @enum {number}
     * @example
     * silkedit.KeyboardModifier.NoModifier
     */
    KeyboardModifier: bridge.QtEnums.KeyboardModifier,
    /**
     * {@link http://doc.qt.io/qt-5/qt.html#Orientation-enum}
     * @readonly
     * @enum {number}
     * @example
     * silkedit.Orientation.Horizontal
     */
    Orientation: bridge.Orientation
};

bridge.JSHandler.eval = require('./lib/repl').eval;

bridge.JSHandler.loadPackage = silkedit.PackageManager.loadPackage;

bridge.JSHandler.deactivatePackages = silkedit.PackageManager._deactivatePackages;

bridge.JSHandler.reloadKeymaps = () => {      
      PackageManager.getPackages().forEach((pkg) => {
        // load keymap
        const keymapPath = path.join(pkg.dir, "keymap.yml");
        fs.open(keymapPath, 'r', (err, fd) => {
          fd && fs.close(fd, (err) => {
            bridge.KeymapManager.load(keymapPath, pkg.name);
          })
        })
      });
    }

bridge.JSHandler.runCommand = silkedit.CommandManager.run;

bridge.JSHandler.unloadPackage = (name) => {
          try {
            silkedit.PackageManager.unloadPackage(name);
            return true;
          } catch(e) {
            console.warn(e)
            return false;
          }
  };
  
bridge.JSHandler.sendGetRequest = (url, timeoutInMS, response) => {
    const req = https.get(url, function(res) {
      var body = '';
      res.setEncoding('utf8');
 
      res.on('data', function(chunk){
        body += chunk;
      });
 
      res.on('end', function(res){
        response.emit('succeeded', body)
      });
    });
    req.setTimeout(timeoutInMS);
    req.on('timeout', function() {
      response.emit('failed', 'timeout');
      req.abort();
    });
    req.on('error', function(e) {
      response.emit('failed', e.message);
    });
  };

silkedit.PackageManager.reloadPackages();

module.exports = silkedit;