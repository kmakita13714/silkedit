'use strict'

const vm = require('vm');
const util = require('util');

const _builtinLibs = ['assert', 'buffer', 'child_process', 'cluster',
  'crypto', 'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'https', 'net',
  'os', 'path', 'punycode', 'querystring', 'readline', 'stream',
  'string_decoder', 'tls', 'tty', 'url', 'util', 'v8', 'vm', 'zlib', 'silkedit'];
  
const context = createContext();

function createContext() {
  const context = vm.createContext();
  for (var i in global) context[i] = global[i];
  context.global = context;
  context.global.global = context;

  context.module = module;
  context.require = require;

  // make built-in modules available directly
  // (loaded lazily)
  _builtinLibs.forEach(function(name) {
    Object.defineProperty(context, name, {
      get: function() {
        var lib = require(name);
        context._ = context[name] = lib;
        return lib;
      },
      // allow the creation of other globals with this name
      set: function(val) {
        delete context[name];
        context[name] = val;
      },
      configurable: true
    });
  });

  return context;
};

module.exports.eval = function(code) {
      var script;
      try {
        if (!/^\s*$/.test(code)) {
          // "void 0" keeps the repl from returning "use strict" as the
          // result value for let/const statements.
          code = `'use strict'; void 0; ${code}`;
        }
        script = vm.createScript(code, {
          filename: 'repl',
          displayErrors: false
        });
      } catch (e) {
        const msg = util.format.call(this, 'parse error %j', code, e);
        console.log(`<div style='color:red;'>${msg}</div>`);
        return;
      }

      var result;
      try {
        result = script.runInContext(context, { displayErrors: false });
      } catch (e) {
        const msg = util.format.call(this, e);
        console.log(`<div style='color:red;'>${msg}</div>`);
      }

    console.log(`<div style='color:blue;'>${result}</div>`);
}