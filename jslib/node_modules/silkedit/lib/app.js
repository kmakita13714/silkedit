'use strict';

const bridge = process.binding('silkeditbridge');

// used only by jsdoc

/**
 * [QApplication]{@link http://doc.qt.io/qt-5/qapplication.html}に対応するオブジェクト。
 * @namespace
 * @memberof module:silkedit
 */
const App = {
  /**
   * @function
   * @returns {module:silkedit.TextEdit}
   */
  activeTextEdit: bridge.App.activeTextEdit,
  /**
   * @function
   * @returns {module:silkedit.TabView}
   */
  activeTabView: bridge.App.activeTabView,
  /**
   * @function
   * @returns {module:silkedit.TabViewGroup}
   */
  activeTabViewGroup: bridge.App.activeTabViewGroup,
  /**
   * @function
   * @returns {module:silkedit.Window}
   */
  activeWindow: bridge.App.activeWindow,
  /**
   * @function
   * @param {object} active
   */
  setActiveWindow: bridge.App.setActiveWindow,
  /**
   * @function
   * @returns {object} [QWidget]{@link http://doc.qt.io/qt-5/qwidget.html}に対応するオブジェクト。
   */
  focusWidget: bridge.App.focusWidget,

  /**
   * @function
   * @returns {object} [QWidget]{@link http://doc.qt.io/qt-5/qwidget.html}に対応するオブジェクト。
   */
  activePopupWidget: bridge.App.activePopupWidget,
  
  /**
   * @function
   * @param {object} receiver - [QObject]{@link http://doc.qt.io/qt-5/qobject.html}に対応するオブジェクト
   * @param {object} event - [QEvent]{@link http://doc.qt.io/qt-5/qevent.html}に対応するオブジェクト
   * @param {module:silkedit.EventPriority} [priority={@link module:silkedit.EventPriority}.NormalEventPriority]
   */
  postEvent: bridge.App.postEvent
};
 
module.exports = App;