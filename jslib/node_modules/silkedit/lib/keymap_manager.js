'use strict';

const bridge = process.binding('silkeditbridge');

var keyEventFilters = [];

bridge.KeymapManager._assignJSKeyEventFilter((event) => {
  try {
    return keyEventFilters.some(fn => fn(event))
  } catch (err) {
    console.error(err);
    return false;
  }
});

/**
 * キーマップを管理するオブジェクト
 * @namespace
 * @memberof module:silkedit
 */
const KeymapManager = {
  /**
   * キーイベントを処理する。
   * @function
   * @param {KeyEvent} keyEvent
   */
  dispatch: (keyEvent) => bridge.KeymapManager.dispatch(keyEvent),
  /**
   * keymap.ymlをロードする。
   * @function
   * @param {string} filename - keymap.ymlのパス
   * @param {string} source - ソースとなるパッケージ名
   */
  load: (filename, source) => bridge.KeymapManager.load(filename, source),
  /**
   * キーイベントフィルターを追加する。
   * @param {module:silkedit.KeymapManager.keyEventFilter} cb - キーイベントフィルター
   */
  addKeyEventFilter: (fn) => keyEventFilters.push(fn),
  /**
   * キーイベントフィルターを削除する。
   * @param {module:silkedit.KeymapManager.keyEventFilter} cb - キーイベントフィルター
   */
  removeKeyEventFilter: (fn) => {
    keyEventFilters = keyEventFilters.filter(e => e !== fn);
  }
};
 
/**
 * 現在newできない。
 */
class KeyEvent {
  /**
   * @returns {module:silkedit.Key}
   */
  key() {};
  /**
   * @returns {module:silkedit.Event.Type}
   */
  type() {};
}

/**
 * キーイベントフィルターはkeymap.ymlで定義されたショートカット実行前に呼びだされる。trueを返すとをショートカットを実行しない。
 * @callback KeymapManager.keyEventFilter
 * @memberof module:silkedit
 * @param {KeyEvent} event - キーイベント
 * @returns {boolean} trueならショートカットを実行しない。falseなら実行。
 */

module.exports = KeymapManager;