'use strict';

// used only by jsdoc

/**
 * [QWebChannel]{@link http://doc.qt.io/qt-5/qwebChannel.html}に対応するクラス。
 * [WebPage]{@link module:silkedit.WebPage}のクライアント側と双方向にデータのやり取りが可能。
 * [マークダウンプレビュー]{@link https://github.com/silkedit/markdown_preview}でも使用されている。
 * @example
 * // index.js (パッケージ内)
 * const channel = new WebChannel();
 * channel.on('connection', (channel) => { channel.sendMessage('text', "hello") });
 * channel.onMessage('text', (text) => { console.log(text + " received") });
 *
 * // index.html (WebPage内)
 * <script type="text/javascript" src="qrc:///webchannel.js"></script>
 * <script>
 * new WebChannel(qt.webChannelTransport,  function(channel) {
 *   channel.onMessage('text', (text) => {
 *     console.warn(text + " received");
 *     channel.sendMessage('text', 'silkedit!');
 *   });
 * });
 * </script>
 * @memberof module:silkedit
 */
class WebChannel {
  /**
   * @param {object} [parent=null] - [QObject]{@link http://doc.qt.io/qt-5/qobject.html}に対応するオブジェクト。
   */
  constructor(parent = null) {}
  
  /**
   * イベントを送信する。connectionイベント発生後に呼び出すこと。
   * @param {string} event
   * @param {boolean|number|string|object|array} data
   */
  sendMessage(event, data) {}
  
  /**
   * イベントを受信した時のコールバックを登録する
   * @param {string} event
   * @param {module:silkedit.WebChannel.messageCallback} cb
   */
  onMessage(event, cb) {};

}

/**
 * @callback WebChannel.messageCallback
 * @memberof module:silkedit
 * @param {boolean|number|string|object|array} data
 */
 
/**
 * WebChannel初期化後に発生
 * 
 * @event WebChannel.connection
 * @param {module:silkedit.WebChannel} channel
 * @memberof module:silkedit
 */