'use strict';

const domain = require('domain');

var commandEventFilters = [];
var commands = {};

/**
 * コマンドイベントフィルターはコマンド実行前に呼びだされる。trueを返すとコマンドを実行しない。
 * @callback CommandManager.commandEventFilter
 * @memberof module:silkedit
 * @param {object} event - コマンドイベント
 * @param {string} event.name - コマンド名
 * @param {object} event.args - コマンド引数
 * @returns {boolean} trueならコマンドを実行しない。falseなら実行。
 */
 
module.exports = function(bridge) {
  bridge.CommandManager._assignJSCommandEventFilter((event) => {
    try {
      return commandEventFilters.some(fn => fn(event))
    } catch (err) {
      console.error(err);
      return false;
    }
  });

  /**
   * コマンドを扱うオブジェクト。
   * @namespace
   * @memberof module:silkedit
   */
  const CommandManager = {
    /**
     * コマンドを追加する。
     * @function
     * @param {string} name - コマンド名
     * @param {string} description - コマンドの説明
     * @param {function} func - 実行する関数
     */
    add: (name, description, func) => {
      if (typeof name !== 'string' || typeof description !== 'string' || typeof func !== 'function') {
        console.warn('invalid arguments');
      }

      commands[name] = func;
      bridge.CommandManager.add(name, description)
    },

    /**
     * コマンドを削除する。
     * @function
     * @param {string} name - コマンド名
     */
    remove: (name) => bridge.CommandManager.remove(name),
  
    /**
     * コマンドを実行する。
     * @function
     * @param {string} name - コマンド名
     * @param {object} args - 引数
     */
    run: (name, args) => {
      if (name in commands) {
        const d = domain.create();
        d.on('error', function(er) {
          console.error(er.stack);
        });
        d.run(function() {
          commands[name](args);
        })
      } else {
        console.warn(name + 'not found');
      }
    },

    /**
     * コマンドイベントフィルターを追加する。
     * @param {module:silkedit.CommandManager.commandEventFilter} cb - コマンドイベントフィルター
     */
    addCommandEventFilter: (cb) => commandEventFilters.push(cb),

    /**
     * コマンドイベントフィルターを削除する。
     * @param {module:silkedit.CommandManager.commandEventFilter} cb - コマンドイベントフィルター
     */
    removeCommandEventFilter: (fn) => {
      commandEventFilters = commandEventFilters.filter(e => e !== fn);
    }
  };

  return CommandManager;
}