'use strict';

const bridge = process.binding('silkeditbridge');

var commandEventFilters = [];

bridge.CommandManager._assignJSCommandEventFilter((event) => {
  try {
    return commandEventFilters.some(fn => fn(event))
  } catch (err) {
    console.error(err);
    return false;
  }
});

/**
 * コマンドを扱うオブジェクト。
 * @namespace
 * @memberof module:silkedit
 */
const CommandManager = {
  /**
   * コマンドを追加する。
   * @function
   * @param {string} name - コマンド名
   * @param {string} description - コマンドの説明
   */
  add: bridge.CommandManager.add,
  /**
   * コマンドを削除する。
   * @function
   * @param {string} name - コマンド名
   */
  remove: bridge.CommandManager.remove,
  /**
   * コマンドイベントフィルターを追加する。
   * @param {module:silkedit.CommandManager.commandEventFilter} cb - コマンドイベントフィルター
   */
  addCommandEventFilter: (cb) => commandEventFilters.push(cb),
  /**
   * コマンドイベントフィルターを削除する。
   * @param {module:silkedit.CommandManager.commandEventFilter} cb - コマンドイベントフィルター
   */
  removeCommandEventFilter: (fn) => {
    commandEventFilters = commandEventFilters.filter(e => e !== fn);
  }
};

/**
 * コマンドイベントフィルターはコマンド実行前に呼びだされる。trueを返すとコマンドを実行しない。
 * @callback CommandManager.commandEventFilter
 * @memberof module:silkedit
 * @param {Object} event - コマンドイベント
 * @param {string} event.name - コマンド名
 * @param {Object} event.args - コマンド引数
 * @returns {boolean} trueならコマンドを実行しない。falseなら実行。
 */
 
module.exports = CommandManager;